type Subscription {
    gameAdded: Game
    gameUpdated(code: String!): Game!
}

extend type Query {
    games: [Game]!
    game(code: String!): Game
    findOpenGame(code: String!): Game
}

extend type Mutation {
    createGame: Game
    nextStage(code: String!): Boolean
    register(code: String!): Boolean
    addResource(code: String!, registrationId: ID!, resource: String!, value: Int!): Boolean
    proposeTrade(code: String!, trade: TradeInput!): Boolean
    acceptTrade(code: String!, tradeId: ID!): Boolean
    rejectTrade(code: String!, tradeId: ID!): Boolean
}

input TilesInput {
    wood: Int
    stone: Int
    livestock: Int
    wheat: Int
    iron: Int
}

input TradeInput {
    fromRegistrationId: ID!
    toRegistrationId: ID!
    values: TilesInput!
}

type Game {
    _id: ID!
    owner: Player!
    code: String!
    stage: String!
    registrations: [Registration]
    trades: [Trade]
}

type Trade {
    _id: ID!
    tradeValues: Tiles!
    fromRegistration: ID!
    toRegistration: ID!
    outcome: String!
}

type Tiles {
    wood: Int
    stone: Int
    livestock: Int
    wheat: Int
    iron: Int
}

type ShoppingCart {
    soldier: Int
    horseman: Int
    cannon: Int
    ship: Int
    settler: Int
    city: Int
    road: Int
    wall: Int
}